blueprint:
  name: Plex Voice Assistant
  description: Control your Plex Clients using Assist
  domain: automation
  input:
    plex_server:
      name: Plex server
      description: Plex server device entry
      selector:
        device:
          manufacturer: "Plex"
          model: "Plex Media Server"
    token:
      name: Plex Token
      description: Active Plex token for authentication purposes
      default: ""
    scan_button:
      name: Scan Clients Button
      description: Button to scan for available Plex clients
      selector:
        entity:
          domain: button
          integration: plex

triggers:
  - trigger: conversation
    command:
      - Play {media} [season {season} [episode {episode}]] [on [player] {player}]
      - Start playing {media} [season {season} [episode {episode}]] [on [player] {player}]
  - trigger: conversation
    command:
      - Shuffle {media} [season {season} [episode {episode}]] [on [player] {player}]
      - Play {media} [season {season} [episode {episode}]] in shuffle mode [on [player] {player}]
      - Shuffle play {media} [season {season} [episode {episode}]] [on [player] {player}]
conditions: []
actions:
  - variables:
      plex_server: !input plex_server
      media_query: "{{ trigger.slots.media | replace('/', '') }}"
      shuffle: "{{ trigger.id }}"
      area: "{{ area_id(trigger.device_id) }}"
      players: |-
        {% if trigger.slots.player %}
          {{ states.media_player
            | selectattr('entity_id', 'in', integration_entities('plex'))
            | selectattr('attributes.friendly_name', 'search', trigger.slots.player, ignorecase=True)
            | selectattr('state', 'ne', 'unavailable')
            | map(attribute='entity_id')
            | list }}
        {% elif area %}
          {{ states.media_player
            | selectattr('entity_id', 'in', area_entities(area))
            | selectattr('entity_id', 'in', integration_entities('plex'))
            | selectattr('state', 'ne', 'unavailable')
            | map(attribute='entity_id')
            | list }}
        {% else %}
          []
        {% endif %}
      base_url: |-
        {{ device_attr(plex_server, "configuration_url").rstrip('/web') }}
  - action: rest_command.plex_query_media
    response_variable: media_response
    data:
      base_url: "{{ base_url }}"
      token: !input token
      media_query: "{{ media_query }}"
  - variables:
      supported_hub_types: ['movie', 'show', 'playlist']
      top_result: >
        {{ media_response['content']['MediaContainer']['Hub'] 
          | selectattr('type', 'in', supported_hub_types) 
          | selectattr('size', 'gt', 0) 
          | first
          | default(none, true) }}
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ top_result is none }}
        sequence:
          - set_conversation_response: Could not find content for {{ media_query }}
      - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ players | length == 0 }}"
              - condition: template
                value_template: "{{ trigger.slots.player is not none }}"
        sequence:
          - set_conversation_response: Plex player {{ trigger.slots.player }} is not available
          - action: button.press
            target:
              entity_id: !input scan_button
      - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ players | length == 0 }}"
              - condition: template
                value_template: "{{ area is not none }}"
        sequence:
          - set_conversation_response: >-
              No plex player available for area {{ area_name(trigger.device_id) }}
          - action: button.press
            target:
              entity_id: !input scan_button
      - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ players | length == 0 }}"
        sequence:
          - set_conversation_response: No plex player provided
    default:
      - variables:
          media_content_type: >-
            {{ top_result['Metadata'][0]['type'] }}
          media_content_library: >-
            {{ top_result['Metadata'][0]['librarySectionTitle'] }}
          media_content_name: >-
            {{ top_result['Metadata'][0]['title'] }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ media_content_type == 'movie' }}"
            sequence:
              - action: media_player.play_media
                data_template:
                  entity_id: "{{ players }}"
                  media_content_id: >-
                    {
                      "library_name": "{{ media_content_library }}",
                      "title": "{{ media_content_name }}"
                    }
                  media_content_type: "{{ media_content_type }}"
          - conditions:
              - condition: template
                value_template: "{{ media_content_type == 'show' }}"
            sequence:
              - action: media_player.play_media
                data_template:
                  entity_id: "{{ players }}"
                  media_content_id: >-
                    {
                      "library_name": "{{ media_content_library }}",
                      "show_name": "{{ media_content_name }}",
                      {% if trigger.slots.season %}
                      "season_number": "{{ trigger.slots.season | int }}",
                      {% endif %}
                      {% if trigger.slots.episode %}
                      "episode_number": "{{ trigger.slots.episode | int }}",
                      {% endif %}
                      "shuffle": "{{ 1 if shuffle else 0 }}",
                      "resume": "0"
                    }
                  media_content_type: "{{ media_content_type }}"
          - conditions:
              - condition: template
                value_template: "{{ media_content_type == 'playlist' }}"
            sequence:
              - action: media_player.play_media
                data_template:
                  entity_id: "{{ players }}"
                  media_content_id: >-
                    {
                      "playlist_name": "{{ media_content_name }}",
                      "shuffle": "{{ 1 if shuffle else 0 }}"
                    }
                  media_content_type: "{{ media_content_type }}"
mode: single
